<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/style.css" />
    <title>Game Series</title>
  </head>
  <body>
    <%- include('partials/header', { title: 'View Scores', page: 'series' }) %>
    <table class="table-sortable">
      <thead>
        <tr>
          <th><button id="Date" class="table-header">Date</button></th>
          <th><button id="League" class="table-header">League</button></th>
          <th><button id="Game1" class="table-header">Game 1</button></th>
          <th><button id="Game2" class="table-header">Game 2</button></th>
          <th><button id="Game3" class="table-header">Game 3</button></th>
          <th><button id="Total" class="table-header">Total</button></th>
          <th><button id="Average" class="table-header">Average</button></th>
        </tr>
      </thead>
      <tbody>
        <% series.forEach((s) => { %>
        <tr>
          <td>
            <%= s.date.toLocaleDateString('en-US', { month: 'long', day:
            'numeric' }) %>
          </td>
          <td><%= s.league_name %></td>
          <td><%= s.game1 %></td>
          <td><%= s.game2 %></td>
          <td><%= s.game3 %></td>
          <td><%= s.total %></td>
          <td><%= Math.floor(s.average) %></td>
        </tr>
        <% }) %>
      </tbody>
      <tbody>
        <tr>
          <td colspan="7">&nbsp;</td>
        </tr>
        <tr>
          <td colspan="5" class="overall">Overall:</td>
          <td><%= totalScores %></td>
          <td><%= Math.floor(averageScore) %></td>
        </tr>
      </tbody>
    </table>

    <script>
      /**
       * Sorts a HTML table.
       *
       * @param {HTMLTableElement} table The table to sort
       * @param {number} column The index of the column to sort
       * @param {boolean} asc Determines if the sorting will be in ascending
       */
      function sortTableByColumn(table, column, asc = true) {
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));
        console.log(tBody);

        // Sort each row
        const sortedRows = rows.sort((a, b) => {
          const aColText = a
            .querySelector(`td:nth-child(${column + 1})`)
            .textContent.trim();
          const bColText = b
            .querySelector(`td:nth-child(${column + 1})`)
            .textContent.trim();

          return aColText > bColText ? 1 * dirModifier : -1 * dirModifier;
        });

        // Remove all existing TRs from the table
        while (tBody.firstChild) {
          tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table
          .querySelectorAll("th")
          .forEach((th) => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table
          .querySelector(`th:nth-child(${column + 1})`)
          .classList.toggle("th-sort-asc", asc);
        table
          .querySelector(`th:nth-child(${column + 1})`)
          .classList.toggle("th-sort-desc", !asc);
      }

      document.querySelectorAll(".table-sortable th").forEach((headerCell) => {
        headerCell.addEventListener("click", () => {
          const tableElement =
            headerCell.parentElement.parentElement.parentElement;
          const headerIndex = Array.prototype.indexOf.call(
            headerCell.parentElement.children,
            headerCell
          );
          const currentIsAscending =
            headerCell.classList.contains("th-sort-asc");

          sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
        });
      });
    </script>
  </body>
</html>
